name: Secrets Scanning Compliance Validation

on:
  schedule:
    # Run twice daily to ensure continuous secrets scanning compliance
    - cron: '0 6,18 * * *'  # 6 AM and 6 PM UTC
  workflow_dispatch:
    inputs:
      scan_scope:
        description: 'Scope of secrets scanning validation'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - active_only
          - private_only
          - public_only
      include_historical:
        description: 'Include historical secrets analysis'
        required: false
        default: true
        type: boolean
      remediation_mode:
        description: 'Remediation approach for violations'
        required: false
        default: 'report_only'
        type: choice
        options:
          - report_only
          - create_issues
          - auto_enable
          - notify_teams

env:
  SCAN_SCOPE: ${{ github.event.inputs.scan_scope || 'all' }}
  INCLUDE_HISTORICAL: ${{ github.event.inputs.include_historical || 'true' }}
  REMEDIATION_MODE: ${{ github.event.inputs.remediation_mode || 'report_only' }}

jobs:
  secrets-scanning-inventory:
    name: Secrets Scanning Feature Inventory
    runs-on: ubuntu-latest
    outputs:
      repository-matrix: ${{ steps.generate-matrix.outputs.repository-matrix }}
      total-repositories: ${{ steps.generate-matrix.outputs.total-repositories }}
    steps:
      - name: Checkout compliance repository
        uses: actions/checkout@v4
        
      - name: Generate repository inventory for secrets scanning
        id: generate-matrix
        run: |
          echo "Generating repository inventory for secrets scanning validation..."
          
          # Build repository filter based on scope
          case "${{ env.SCAN_SCOPE }}" in
            "active_only")
              REPO_FILTER='.[] | select(.archived == false)'
              ;;
            "private_only")
              REPO_FILTER='.[] | select(.private == true)'
              ;;
            "public_only")
              REPO_FILTER='.[] | select(.private == false)'
              ;;
            *)
              REPO_FILTER='.[]'
              ;;
          esac
          
          # Fetch comprehensive repository data
          gh repo list ${{ github.repository_owner }} \
            --limit 1000 \
            --json name,isPrivate,isArchived,defaultBranchRef,createdAt,pushedAt \
            | jq "$REPO_FILTER" > repositories.json
          
          # Create matrix for parallel processing (chunks of 25 repos for secrets scanning)
          REPO_MATRIX=$(jq -c '[_nwise(25) | {repositories: .}]' repositories.json)
          TOTAL_REPOS=$(jq 'length' repositories.json)
          
          echo "repository-matrix=$REPO_MATRIX" >> $GITHUB_OUTPUT
          echo "total-repositories=$TOTAL_REPOS" >> $GITHUB_OUTPUT
          
          echo "Generated matrix for $TOTAL_REPOS repositories"
          
      - name: Upload repository inventory
        uses: actions/upload-artifact@v4
        with:
          name: secrets-scanning-inventory
          path: repositories.json
          retention-days: 7

  validate-secrets-scanning-config:
    name: Validate Secrets Scanning Configuration
    runs-on: ubuntu-latest
    needs: secrets-scanning-inventory
    if: needs.secrets-scanning-inventory.outputs.total-repositories > 0
    strategy:
      matrix:
        batch: ${{ fromJson(needs.secrets-scanning-inventory.outputs.repository-matrix) }}
      fail-fast: false
      max-parallel: 8
    steps:
      - name: Checkout compliance scripts
        uses: actions/checkout@v4
        
      - name: Setup secrets scanning validation environment
        run: |
          mkdir -p secrets-violations secrets-analysis compliance-reports
          
          # Install additional tools for secrets analysis
          pip install detect-secrets semgrep
          npm install -g @trufflesecurity/trufflehog
          
      - name: Validate secrets scanning enablement
        id: validate-enablement
        run: |
          echo "Validating secrets scanning enablement for repository batch..."
          
          ENABLEMENT_VIOLATIONS="[]"
          
          # Process each repository in the batch
          echo '${{ toJson(matrix.batch.repositories) }}' | jq -r '.[] | .name' | while read repo_name; do
            echo "Validating secrets scanning for: $repo_name"
            
            # Get repository security and analysis settings
            REPO_SECURITY=$(gh api "repos/${{ github.repository_owner }}/$repo_name" \
              --jq '.security_and_analysis // {}')
            
            # Check secret scanning status
            SECRET_SCANNING_STATUS=$(echo "$REPO_SECURITY" | jq -r '.secret_scanning.status // "disabled"')
            SECRET_SCANNING_PUSH_PROTECTION=$(echo "$REPO_SECURITY" | jq -r '.secret_scanning_push_protection.status // "disabled"')
            
            # Validate based on compliance requirements
            REPO_PRIVATE=$(echo '${{ toJson(matrix.batch.repositories) }}' | jq -r --arg repo "$repo_name" '.[] | select(.name == $repo) | .isPrivate')
            
            # Secret scanning should be enabled for all repositories
            if [[ "$SECRET_SCANNING_STATUS" != "enabled" ]]; then
              VIOLATION=$(jq -n \
                --arg repo "$repo_name" \
                --arg feature "secret_scanning" \
                --arg status "$SECRET_SCANNING_STATUS" \
                --arg private "$REPO_PRIVATE" \
                --arg severity "high" \
                '{
                  repository: $repo,
                  violation_type: "secret_scanning_disabled",
                  feature: $feature,
                  current_status: $status,
                  expected_status: "enabled",
                  repository_private: ($private == "true"),
                  severity: $severity,
                  compliance_standards: ["HITRUST", "FedRAMP", "HIPAA"],
                  compliance_controls: {
                    hitrust: ["SI.1.210", "SI.2.214"],
                    fedramp: ["SI-3", "SI-7"],
                    hipaa: ["164.312(c)(1)"]
                  },
                  detected_at: now | strftime("%Y-%m-%dT%H:%M:%SZ")
                }')
              
              ENABLEMENT_VIOLATIONS=$(echo "$ENABLEMENT_VIOLATIONS" | jq ". + [$VIOLATION]")
            fi
            
            # Push protection should be enabled for enhanced security
            if [[ "$SECRET_SCANNING_PUSH_PROTECTION" != "enabled" ]]; then
              VIOLATION=$(jq -n \
                --arg repo "$repo_name" \
                --arg feature "secret_scanning_push_protection" \
                --arg status "$SECRET_SCANNING_PUSH_PROTECTION" \
                --arg private "$REPO_PRIVATE" \
                --arg severity "medium" \
                '{
                  repository: $repo,
                  violation_type: "push_protection_disabled",
                  feature: $feature,
                  current_status: $status,
                  expected_status: "enabled",
                  repository_private: ($private == "true"),
                  severity: $severity,
                  compliance_standards: ["HITRUST", "FedRAMP"],
                  compliance_controls: {
                    hitrust: ["SI.1.210"],
                    fedramp: ["SI-3"]
                  },
                  detected_at: now | strftime("%Y-%m-%dT%H:%M:%SZ")
                }')
              
              ENABLEMENT_VIOLATIONS=$(echo "$ENABLEMENT_VIOLATIONS" | jq ". + [$VIOLATION]")
            fi
          done
          
          echo "$ENABLEMENT_VIOLATIONS" > "secrets-violations/enablement_violations_batch_${{ strategy.job-index }}.json"
          
          VIOLATION_COUNT=$(echo "$ENABLEMENT_VIOLATIONS" | jq 'length')
          echo "enablement_violations=$VIOLATION_COUNT" >> $GITHUB_OUTPUT
          
          echo "Found $VIOLATION_COUNT secrets scanning enablement violations"
          
      - name: Analyze active secrets alerts
        id: analyze-alerts
        run: |
          echo "Analyzing active secrets alerts..."
          
          ACTIVE_ALERTS="[]"
          ALERT_ANALYSIS="[]"
          
          echo '${{ toJson(matrix.batch.repositories) }}' | jq -r '.[] | .name' | while read repo_name; do
            echo "Analyzing secrets alerts for: $repo_name"
            
            # Get secret scanning alerts for the repository
            SECRETS_ALERTS=$(gh api "repos/${{ github.repository_owner }}/$repo_name/secret-scanning/alerts" \
              --paginate \
              --jq 'map(select(.state == "open"))' 2>/dev/null || echo "[]")
            
            ALERT_COUNT=$(echo "$SECRETS_ALERTS" | jq 'length')
            
            if [[ "$ALERT_COUNT" -gt 0 ]]; then
              echo "Found $ALERT_COUNT open secrets alerts in $repo_name"
              
              # Analyze alert patterns and severity
              CRITICAL_SECRETS=$(echo "$SECRETS_ALERTS" | jq 'map(select(.secret_type_display_name | contains("AWS") or contains("Azure") or contains("Google") or contains("Database") or contains("Private Key")))')
              CRITICAL_COUNT=$(echo "$CRITICAL_SECRETS" | jq 'length')
              
              # Create alert analysis
              ANALYSIS=$(jq -n \
                --arg repo "$repo_name" \
                --arg total_alerts "$ALERT_COUNT" \
                --arg critical_alerts "$CRITICAL_COUNT" \
                --argjson alerts "$SECRETS_ALERTS" \
                --argjson critical_secrets "$CRITICAL_SECRETS" \
                '{
                  repository: $repo,
                  analysis_type: "active_secrets_alerts",
                  total_open_alerts: ($total_alerts | tonumber),
                  critical_secrets_count: ($critical_alerts | tonumber),
                  alert_breakdown: ($alerts | group_by(.secret_type_display_name) | map({
                    secret_type: .[0].secret_type_display_name,
                    count: length,
                    locations: map(.locations[0].path // "unknown") | unique
                  })),
                  critical_secrets: $critical_secrets,
                  compliance_risk: (if ($critical_alerts | tonumber) > 0 then "high" elif ($total_alerts | tonumber) > 5 then "medium" else "low" end),
                  detected_at: now | strftime("%Y-%m-%dT%H:%M:%SZ")
                }')
              
              ALERT_ANALYSIS=$(echo "$ALERT_ANALYSIS" | jq ". + [$ANALYSIS]")
              
              # Add to active alerts collection
              REPO_ALERTS=$(echo "$SECRETS_ALERTS" | jq --arg repo "$repo_name" 'map(. + {repository: $repo})')
              ACTIVE_ALERTS=$(echo "$ACTIVE_ALERTS $REPO_ALERTS" | jq -s 'add')
            fi
          done
          
          echo "$ALERT_ANALYSIS" > "secrets-analysis/alert_analysis_batch_${{ strategy.job-index }}.json"
          echo "$ACTIVE_ALERTS" > "secrets-analysis/active_alerts_batch_${{ strategy.job-index }}.json"
          
          ANALYSIS_COUNT=$(echo "$ALERT_ANALYSIS" | jq 'length')
          TOTAL_ALERTS=$(echo "$ACTIVE_ALERTS" | jq 'length')
          
          echo "alert_analysis_count=$ANALYSIS_COUNT" >> $GITHUB_OUTPUT
          echo "total_active_alerts=$TOTAL_ALERTS" >> $GITHUB_OUTPUT
          
      - name: Historical secrets analysis
        if: env.INCLUDE_HISTORICAL == 'true'
        id: historical-analysis
        run: |
          echo "Performing historical secrets analysis..."
          
          HISTORICAL_PATTERNS="[]"
          
          echo '${{ toJson(matrix.batch.repositories) }}' | jq -r '.[] | .name' | while read repo_name; do
            echo "Historical analysis for: $repo_name"
            
            # Get resolved/closed secrets alerts to understand patterns
            HISTORICAL_ALERTS=$(gh api "repos/${{ github.repository_owner }}/$repo_name/secret-scanning/alerts" \
              --paginate \
              --field state=resolved \
              --jq 'map(select(.state == "resolved" or .state == "revoked"))' 2>/dev/null || echo "[]")
            
            HISTORICAL_COUNT=$(echo "$HISTORICAL_ALERTS" | jq 'length')
            
            if [[ "$HISTORICAL_COUNT" -gt 0 ]]; then
              # Analyze historical patterns
              PATTERN_ANALYSIS=$(echo "$HISTORICAL_ALERTS" | jq --arg repo "$repo_name" '{
                repository: $repo,
                analysis_type: "historical_secrets_patterns",
                total_resolved_alerts: length,
                resolution_patterns: (group_by(.resolution) | map({
                  resolution_type: .[0].resolution,
                  count: length
                })),
                secret_type_patterns: (group_by(.secret_type_display_name) | map({
                  secret_type: .[0].secret_type_display_name,
                  count: length,
                  avg_resolution_time: (map(.resolved_at // .created_at) | length)
                })),
                trend_indicators: {
                  frequent_secret_types: (group_by(.secret_type_display_name) | map({type: .[0].secret_type_display_name, count: length}) | sort_by(.count) | reverse | .[0:3]),
                  resolution_efficiency: (map(select(.resolution == "revoked")) | length)
                },
                analyzed_at: now | strftime("%Y-%m-%dT%H:%M:%SZ")
              }')
              
              HISTORICAL_PATTERNS=$(echo "$HISTORICAL_PATTERNS" | jq ". + [$PATTERN_ANALYSIS]")
            fi
          done
          
          echo "$HISTORICAL_PATTERNS" > "secrets-analysis/historical_patterns_batch_${{ strategy.job-index }}.json"
          
          PATTERN_COUNT=$(echo "$HISTORICAL_PATTERNS" | jq 'length')
          echo "historical_patterns=$PATTERN_COUNT" >> $GITHUB_OUTPUT
          
      - name: Perform additional secrets detection
        run: |
          echo "Performing additional secrets detection with external tools..."
          
          ADDITIONAL_FINDINGS="[]"
          
          # Note: This is a sample - in production, you'd clone and scan repositories
          echo '${{ toJson(matrix.batch.repositories) }}' | jq -r '.[] | select(.isPrivate == false) | .name' | head -3 | while read repo_name; do
            echo "Additional scanning for public repo: $repo_name"
            
            # Clone repository for scanning (limited to public repos for security)
            git clone "https://github.com/${{ github.repository_owner }}/$repo_name.git" "/tmp/$repo_name" 2>/dev/null || continue
            
            # Run detect-secrets
            cd "/tmp/$repo_name"
            detect-secrets scan --all-files 2>/dev/null > "/tmp/detect-secrets-$repo_name.json" || echo "{}" > "/tmp/detect-secrets-$repo_name.json"
            
            # Analyze results
            DETECT_SECRETS_RESULTS=$(cat "/tmp/detect-secrets-$repo_name.json")
            SECRET_COUNT=$(echo "$DETECT_SECRETS_RESULTS" | jq '.results | keys | length' 2>/dev/null || echo "0")
            
            if [[ "$SECRET_COUNT" -gt 0 ]]; then
              FINDING=$(jq -n \
                --arg repo "$repo_name" \
                --arg tool "detect-secrets" \
                --arg count "$SECRET_COUNT" \
                --argjson results "$DETECT_SECRETS_RESULTS" \
                '{
                  repository: $repo,
                  scanning_tool: $tool,
                  potential_secrets_found: ($count | tonumber),
                  scan_results: $results,
                  requires_manual_review: true,
                  detected_at: now | strftime("%Y-%m-%dT%H:%M:%SZ")
                }')
              
              ADDITIONAL_FINDINGS=$(echo "$ADDITIONAL_FINDINGS" | jq ". + [$FINDING]")
            fi
            
            # Cleanup
            rm -rf "/tmp/$repo_name"
          done
          
          echo "$ADDITIONAL_FINDINGS" > "secrets-analysis/additional_findings_batch_${{ strategy.job-index }}.json"
          
      - name: Generate batch compliance report
        run: |
          echo "Generating batch secrets scanning compliance report..."
          
          # Combine all findings
          ENABLEMENT_VIOLATIONS="[]"
          ALERT_ANALYSIS="[]"
          HISTORICAL_PATTERNS="[]"
          ADDITIONAL_FINDINGS="[]"
          
          [[ -f "secrets-violations/enablement_violations_batch_${{ strategy.job-index }}.json" ]] && \
            ENABLEMENT_VIOLATIONS=$(cat "secrets-violations/enablement_violations_batch_${{ strategy.job-index }}.json")
          
          [[ -f "secrets-analysis/alert_analysis_batch_${{ strategy.job-index }}.json" ]] && \
            ALERT_ANALYSIS=$(cat "secrets-analysis/alert_analysis_batch_${{ strategy.job-index }}.json")
          
          [[ -f "secrets-analysis/historical_patterns_batch_${{ strategy.job-index }}.json" ]] && \
            HISTORICAL_PATTERNS=$(cat "secrets-analysis/historical_patterns_batch_${{ strategy.job-index }}.json")
          
          [[ -f "secrets-analysis/additional_findings_batch_${{ strategy.job-index }}.json" ]] && \
            ADDITIONAL_FINDINGS=$(cat "secrets-analysis/additional_findings_batch_${{ strategy.job-index }}.json")
          
          # Generate comprehensive batch report
          BATCH_REPORT=$(jq -n \
            --arg batch_id "${{ strategy.job-index }}" \
            --argjson enablement_violations "$ENABLEMENT_VIOLATIONS" \
            --argjson alert_analysis "$ALERT_ANALYSIS" \
            --argjson historical_patterns "$HISTORICAL_PATTERNS" \
            --argjson additional_findings "$ADDITIONAL_FINDINGS" \
            '{
              batch_metadata: {
                batch_id: $batch_id,
                scan_scope: "${{ env.SCAN_SCOPE }}",
                include_historical: "${{ env.INCLUDE_HISTORICAL }}",
                generated_at: now | strftime("%Y-%m-%dT%H:%M:%SZ")
              },
              secrets_scanning_compliance: {
                enablement_violations: {
                  count: ($enablement_violations | length),
                  violations: $enablement_violations
                },
                active_alerts_analysis: {
                  repositories_with_alerts: ($alert_analysis | length),
                  total_critical_alerts: ($alert_analysis | map(.critical_secrets_count) | add // 0),
                  analysis: $alert_analysis
                },
                historical_analysis: {
                  repositories_analyzed: ($historical_patterns | length),
                  patterns: $historical_patterns
                },
                additional_scanning: {
                  repositories_scanned: ($additional_findings | length),
                  findings: $additional_findings
                }
              },
              compliance_assessment: {
                batch_compliance_score: (100 - (($enablement_violations | length) * 10)),
                critical_issues: (($enablement_violations | map(select(.severity == "high")) | length) + ($alert_analysis | map(select(.compliance_risk == "high")) | length)),
                requires_immediate_attention: (($enablement_violations | map(select(.severity == "high")) | length) > 0)
              }
            }')
          
          echo "$BATCH_REPORT" > "compliance-reports/secrets_batch_report_${{ strategy.job-index }}.json"
          
      - name: Upload batch artifacts
        uses: actions/upload-artifact@v4
        with:
          name: secrets-scanning-batch-${{ strategy.job-index }}
          path: |
            secrets-violations/
            secrets-analysis/
            compliance-reports/
          retention-days: 90

  consolidate-secrets-compliance:
    name: Consolidate Secrets Scanning Compliance
    runs-on: ubuntu-latest
    needs: [secrets-scanning-inventory, validate-secrets-scanning-config]
    if: always() && needs.secrets-scanning-inventory.outputs.total-repositories > 0
    steps:
      - name: Checkout compliance repository
        uses: actions/checkout@v4
        
      - name: Download all batch results
        uses: actions/download-artifact@v4
        with:
          pattern: secrets-scanning-batch-*
          path: batch-results/
          
      - name: Consolidate secrets compliance results
        id: consolidate
        run: |
          echo "Consolidating secrets scanning compliance results..."
          
          mkdir -p final-reports
          
          # Initialize consolidated data
          ALL_ENABLEMENT_VIOLATIONS="[]"
          ALL_ALERT_ANALYSIS="[]"
          ALL_HISTORICAL_PATTERNS="[]"
          ALL_ADDITIONAL_FINDINGS="[]"
          
          # Combine all batch results
          find batch-results/ -name "enablement_violations_batch_*.json" -exec cat {} \; | jq -s 'add // []' > temp_enablement.json
          find batch-results/ -name "alert_analysis_batch_*.json" -exec cat {} \; | jq -s 'add // []' > temp_alerts.json
          find batch-results/ -name "historical_patterns_batch_*.json" -exec cat {} \; | jq -s 'add // []' > temp_historical.json
          find batch-results/ -name "additional_findings_batch_*.json" -exec cat {} \; | jq -s 'add // []' > temp_additional.json
          
          ALL_ENABLEMENT_VIOLATIONS=$(cat temp_enablement.json)
          ALL_ALERT_ANALYSIS=$(cat temp_alerts.json)
          ALL_HISTORICAL_PATTERNS=$(cat temp_historical.json)
          ALL_ADDITIONAL_FINDINGS=$(cat temp_additional.json)
          
          # Calculate comprehensive metrics
          TOTAL_REPOS="${{ needs.secrets-scanning-inventory.outputs.total-repositories }}"
          ENABLEMENT_VIOLATIONS_COUNT=$(echo "$ALL_ENABLEMENT_VIOLATIONS" | jq 'length')
          REPOS_WITH_ALERTS=$(echo "$ALL_ALERT_ANALYSIS" | jq 'length')
          TOTAL_CRITICAL_ALERTS=$(echo "$ALL_ALERT_ANALYSIS" | jq 'map(.critical_secrets_count) | add // 0')
          REPOS_WITHOUT_SECRETS_SCANNING=$(echo "$ALL_ENABLEMENT_VIOLATIONS" | jq 'map(select(.feature == "secret_scanning")) | length')
          
          # Calculate compliance score
          COMPLIANCE_SCORE=100
          if [[ "$TOTAL_REPOS" -gt 0 ]]; then
            COMPLIANCE_PENALTY=$((REPOS_WITHOUT_SECRETS_SCANNING * 15 + TOTAL_CRITICAL_ALERTS * 5))
            COMPLIANCE_SCORE=$((100 - COMPLIANCE_PENALTY))
            if [[ "$COMPLIANCE_SCORE" -lt 0 ]]; then
              COMPLIANCE_SCORE=0
            fi
          fi
          
          # Generate final comprehensive report
          FINAL_REPORT=$(jq -n \
            --arg total_repos "$TOTAL_REPOS" \
            --arg enablement_violations "$ENABLEMENT_VIOLATIONS_COUNT" \
            --arg repos_with_alerts "$REPOS_WITH_ALERTS" \
            --arg total_critical_alerts "$TOTAL_CRITICAL_ALERTS" \
            --arg compliance_score "$COMPLIANCE_SCORE" \
            --argjson all_enablement_violations "$ALL_ENABLEMENT_VIOLATIONS" \
            --argjson all_alert_analysis "$ALL_ALERT_ANALYSIS" \
            --argjson all_historical_patterns "$ALL_HISTORICAL_PATTERNS" \
            --argjson all_additional_findings "$ALL_ADDITIONAL_FINDINGS" \
            '{
              report_metadata: {
                report_type: "secrets_scanning_compliance_validation",
                scan_scope: "${{ env.SCAN_SCOPE }}",
                include_historical: "${{ env.INCLUDE_HISTORICAL }}",
                remediation_mode: "${{ env.REMEDIATION_MODE }}",
                generated_at: now | strftime("%Y-%m-%dT%H:%M:%SZ")
              },
              executive_summary: {
                total_repositories_scanned: ($total_repos | tonumber),
                overall_compliance_score: ($compliance_score | tonumber),
                repositories_without_secrets_scanning: ($all_enablement_violations | map(select(.feature == "secret_scanning")) | map(.repository) | unique | length),
                repositories_with_active_alerts: ($repos_with_alerts | tonumber),
                total_critical_secrets_alerts: ($total_critical_alerts | tonumber),
                compliance_status: (if ($compliance_score | tonumber) >= 90 then "compliant" elif ($compliance_score | tonumber) >= 75 then "mostly_compliant" else "non_compliant" end)
              },
              detailed_findings: {
                secrets_scanning_enablement: {
                  violations_count: ($enablement_violations | tonumber),
                  violations: $all_enablement_violations,
                  repositories_missing_secret_scanning: ($all_enablement_violations | map(select(.feature == "secret_scanning")) | map(.repository) | unique),
                  repositories_missing_push_protection: ($all_enablement_violations | map(select(.feature == "secret_scanning_push_protection")) | map(.repository) | unique)
                },
                active_secrets_alerts: {
                  repositories_with_alerts: ($all_alert_analysis | length),
                  high_risk_repositories: ($all_alert_analysis | map(select(.compliance_risk == "high"))),
                  alert_breakdown_by_type: ($all_alert_analysis | map(.alert_breakdown[]) | group_by(.secret_type) | map({secret_type: .[0].secret_type, total_count: (map(.count) | add)})),
                  analysis: $all_alert_analysis
                },
                historical_analysis: {
                  repositories_with_history: ($all_historical_patterns | length),
                  resolution_trends: ($all_historical_patterns | map(.resolution_patterns[]) | group_by(.resolution_type) | map({resolution_type: .[0].resolution_type, total_count: (map(.count) | add)})),
                  patterns: $all_historical_patterns
                },
                additional_scanning_results: {
                  repositories_scanned: ($all_additional_findings | length),
                  potential_secrets_found: ($all_additional_findings | map(.potential_secrets_found) | add // 0),
                  findings: $all_additional_findings
                }
              },
              compliance_impact_assessment: {
                hitrust_csf: {
                  applicable_controls: ["SI.1.210", "SI.2.214"],
                  compliance_status: (if ($compliance_score | tonumber) >= 90 then "compliant" else "non_compliant" end),
                  critical_gaps: ($all_enablement_violations | map(select(.severity == "high")) | length)
                },
                fedramp: {
                  applicable_controls: ["SI-3", "SI-7"],
                  compliance_status: (if ($compliance_score | tonumber) >= 90 then "compliant" else "non_compliant" end),
                  critical_gaps: ($all_enablement_violations | map(select(.severity == "high")) | length)
                },
                hipaa: {
                  applicable_safeguards: ["164.312(c)(1)"],
                  compliance_status: (if ($compliance_score | tonumber) >= 85 then "compliant" else "non_compliant" end),
                  privacy_risk_level: (if ($total_critical_alerts | tonumber) > 0 then "high" else "low" end)
                }
              },
              recommendations: [
                "Enable secrets scanning on all repositories without it",
                "Enable push protection to prevent secrets from being committed",
                "Implement automated remediation for detected secrets",
                "Regular review and rotation of any exposed credentials",
                "Training for developers on secrets management best practices",
                "Integration with enterprise secret management solutions"
              ]
            }')
          
          echo "$FINAL_REPORT" > final-reports/secrets_scanning_compliance_report.json
          
          # Set outputs for downstream jobs
          echo "compliance_score=$COMPLIANCE_SCORE" >> $GITHUB_OUTPUT
          echo "enablement_violations=$ENABLEMENT_VIOLATIONS_COUNT" >> $GITHUB_OUTPUT
          echo "critical_alerts=$TOTAL_CRITICAL_ALERTS" >> $GITHUB_OUTPUT
          echo "repos_with_alerts=$REPOS_WITH_ALERTS" >> $GITHUB_OUTPUT
          
      - name: Execute remediation actions
        if: env.REMEDIATION_MODE != 'report_only'
        run: |
          echo "Executing secrets scanning remediation (mode: ${{ env.REMEDIATION_MODE }})"
          
          if [[ "${{ env.REMEDIATION_MODE }}" == "auto_enable" ]]; then
            echo "Auto-enabling secrets scanning for non-compliant repositories..."
            
            # Get repositories missing secrets scanning
            REPOS_TO_FIX=$(jq -r '.detailed_findings.secrets_scanning_enablement.repositories_missing_secret_scanning[]' final-reports/secrets_scanning_compliance_report.json)
            
            echo "$REPOS_TO_FIX" | while read repo_name; do
              if [[ -n "$repo_name" ]]; then
                echo "Enabling secrets scanning for: $repo_name"
                
                # Enable secret scanning
                gh api "repos/${{ github.repository_owner }}/$repo_name" \
                  --method PATCH \
                  --field security_and_analysis='{"secret_scanning":{"status":"enabled"},"secret_scanning_push_protection":{"status":"enabled"}}' \
                  || echo "Failed to enable secrets scanning for $repo_name"
              fi
            done
            
          elif [[ "${{ env.REMEDIATION_MODE }}" == "create_issues" ]]; then
            echo "Creating issues for secrets scanning violations..."
            
            # Create issues for repositories with violations
            jq -r '.detailed_findings.secrets_scanning_enablement.repositories_missing_secret_scanning[]' final-reports/secrets_scanning_compliance_report.json | \
            while read repo_name; do
              if [[ -n "$repo_name" ]]; then
                ISSUE_BODY=$(cat << EOF
## Secrets Scanning Compliance Violation

**Repository**: \`$repo_name\`  
**Violation**: Secrets scanning is not enabled  
**Severity**: High  
**Compliance Impact**: Violates HITRUST, FedRAMP, and HIPAA requirements

### Required Actions

1. **Enable Secrets Scanning**:
   - Go to repository Settings → Security & analysis
   - Enable "Secret scanning"
   - Enable "Push protection" for enhanced security

2. **Review Existing Code**:
   - Scan historical commits for potential secrets
   - Rotate any identified credentials immediately

3. **Implement Prevention**:
   - Configure pre-commit hooks for secrets detection
   - Train team on secure coding practices

### Auto-Remediation Available

To automatically enable secrets scanning:
\`\`\`bash
gh api repos/${{ github.repository_owner }}/$repo_name \\
  --method PATCH \\
  --field security_and_analysis='{"secret_scanning":{"status":"enabled"},"secret_scanning_push_protection":{"status":"enabled"}}'
\`\`\`

### Compliance Standards Affected
- **HITRUST CSF**: SI.1.210, SI.2.214
- **FedRAMP**: SI-3, SI-7  
- **HIPAA**: 164.312(c)(1)

---
*This issue was automatically created by the Secrets Scanning Validation workflow*
EOF
)
                
                gh issue create \
                  --title "🔍 Secrets Scanning Not Enabled: $repo_name" \
                  --body "$ISSUE_BODY" \
                  --label "compliance-violation,secrets-scanning,high-severity" \
                  --assignee "@me" || echo "Failed to create issue for $repo_name"
              fi
            done
          fi
          
      - name: Update secrets scanning compliance dashboard
        run: |
          echo "Updating secrets scanning compliance dashboard..."
          
          DASHBOARD_TITLE="🔍 Secrets Scanning Compliance Dashboard"
          EXISTING_DASHBOARD=$(gh issue list --label "secrets-scanning-dashboard" --state open --limit 1 --json number --jq '.[0].number // empty')
          
          COMPLIANCE_SCORE="${{ steps.consolidate.outputs.compliance_score }}"
          ENABLEMENT_VIOLATIONS="${{ steps.consolidate.outputs.enablement_violations }}"
          CRITICAL_ALERTS="${{ steps.consolidate.outputs.critical_alerts }}"
          REPOS_WITH_ALERTS="${{ steps.consolidate.outputs.repos_with_alerts }}"
          
          # Determine status
          if [[ "$COMPLIANCE_SCORE" -ge 90 ]]; then
            STATUS_EMOJI="🟢"
            STATUS_TEXT="Compliant"
          elif [[ "$COMPLIANCE_SCORE" -ge 75 ]]; then
            STATUS_EMOJI="🟡"
            STATUS_TEXT="Mostly Compliant"
          else
            STATUS_EMOJI="🔴"
            STATUS_TEXT="Non-Compliant"
          fi
          
          DASHBOARD_BODY=$(cat << EOF
## Secrets Scanning Compliance Status

**Overall Status**: $STATUS_EMOJI $STATUS_TEXT ($COMPLIANCE_SCORE%)  
**Last Validation**: $(date)  
**Scope**: ${{ env.SCAN_SCOPE }}  
**Total Repositories**: ${{ needs.secrets-scanning-inventory.outputs.total-repositories }}

### Compliance Summary

| Metric | Value | Status |
|--------|-------|--------|
| **Compliance Score** | $COMPLIANCE_SCORE% | $(if [[ "$COMPLIANCE_SCORE" -ge 90 ]]; then echo "✅"; elif [[ "$COMPLIANCE_SCORE" -ge 75 ]]; then echo "⚠️"; else echo "❌"; fi) |
| **Enablement Violations** | $ENABLEMENT_VIOLATIONS | $(if [[ "$ENABLEMENT_VIOLATIONS" -eq 0 ]]; then echo "✅"; else echo "❌"; fi) |
| **Repositories with Active Alerts** | $REPOS_WITH_ALERTS | $(if [[ "$REPOS_WITH_ALERTS" -eq 0 ]]; then echo "✅"; else echo "⚠️"; fi) |
| **Critical Secrets Alerts** | $CRITICAL_ALERTS | $(if [[ "$CRITICAL_ALERTS" -eq 0 ]]; then echo "✅"; else echo "🚨"; fi) |

### Compliance Standards Impact

- **HITRUST CSF**: $(if [[ "$COMPLIANCE_SCORE" -ge 90 ]]; then echo "✅ Compliant"; else echo "❌ Non-Compliant"; fi) (SI.1.210, SI.2.214)
- **FedRAMP**: $(if [[ "$COMPLIANCE_SCORE" -ge 90 ]]; then echo "✅ Compliant"; else echo "❌ Non-Compliant"; fi) (SI-3, SI-7)
- **HIPAA**: $(if [[ "$COMPLIANCE_SCORE" -ge 85 ]]; then echo "✅ Compliant"; else echo "❌ Non-Compliant"; fi) (164.312(c)(1))

### Recent Actions

- **Remediation Mode**: ${{ env.REMEDIATION_MODE }}
- **Historical Analysis**: ${{ env.INCLUDE_HISTORICAL }}
- **Auto-Enablement**: $(if [[ "${{ env.REMEDIATION_MODE }}" == "auto_enable" ]]; then echo "Active"; else echo "Inactive"; fi)

### Quick Actions

- [Run Secrets Scanning Validation](../actions/workflows/secrets-scanning-validation.yml)
- [View Detailed Report](../actions/runs/${{ github.run_id }})
- [Enable Secrets Scanning Guide](../blob/main/docs/security-guides/secrets-scanning-setup.md)

---
*Updated automatically by Secrets Scanning Validation workflow*
EOF
)
          
          if [[ -n "$EXISTING_DASHBOARD" ]]; then
            gh issue edit "$EXISTING_DASHBOARD" \
              --title "$DASHBOARD_TITLE" \
              --body "$DASHBOARD_BODY"
          else
            gh issue create \
              --title "$DASHBOARD_TITLE" \
              --body "$DASHBOARD_BODY" \
              --label "secrets-scanning-dashboard,compliance-monitoring" \
              --pin
          fi
          
      - name: Upload final compliance report
        uses: actions/upload-artifact@v4
        with:
          name: secrets-scanning-final-report
          path: final-reports/
          retention-days: 365  # Long retention for compliance audit
          
      - name: Secrets scanning validation summary
        run: |
          echo "=== Secrets Scanning Compliance Validation Summary ==="
          echo "Total Repositories: ${{ needs.secrets-scanning-inventory.outputs.total-repositories }}"
          echo "Compliance Score: ${{ steps.consolidate.outputs.compliance_score }}%"
          echo "Enablement Violations: ${{ steps.consolidate.outputs.enablement_violations }}"
          echo "Repositories with Alerts: ${{ steps.consolidate.outputs.repos_with_alerts }}"
          echo "Critical Secrets Alerts: ${{ steps.consolidate.outputs.critical_alerts }}"
          echo "Remediation Mode: ${{ env.REMEDIATION_MODE }}"
          echo ""
          
          if [[ "${{ steps.consolidate.outputs.critical_alerts }}" -gt 0 ]]; then
            echo "🚨 CRITICAL SECRETS DETECTED - Immediate remediation required!"
            exit 1
          elif [[ "${{ steps.consolidate.outputs.compliance_score }}" -lt 75 ]]; then
            echo "❌ LOW COMPLIANCE SCORE - Remediation needed"
            exit 1
          elif [[ "${{ steps.consolidate.outputs.enablement_violations }}" -gt 0 ]]; then
            echo "⚠️  ENABLEMENT VIOLATIONS - Review and enable secrets scanning"
            exit 1
          else
            echo "✅ Secrets scanning compliance validation passed"
          fi 